#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  5 15:58:41 2022

@author: bennski
"""


import plotly.offline as py
import plotly.graph_objects as go
import plotly.figure_factory as ff


import numpy as np
import pandas as pd
import scipy
import peakutils
import pylab as plb

start_finish_vals = [[1225,1241+1],[1367,1400+1],[1600,1609+1],[2143,2192+1],[2318,2334+1],[2797,2817+1],[2991,3010+1]]

#NOISE FLOOR ROUGHLY mag=1-10
noise_floor = [[1.,131.9],[1.,83.97],[1.,6.42],[85.07,298.8],[13.16,44.98],[5.21,33.36],[1.,9.34]]

noise_floor_lower = 1.
noise_floor_upper = 10.


data = plb.loadtxt('H5_subtract_chrom.dat', skiprows=2)

time = data[:,1]
mag = data[:,2]


for i in range(0,len(start_finish_vals)):

    time_series = np.asarray(mag)
    
    area_under_first_peak = np.zeros(shape=(2))
    
    #UPPER_BOUND_AREA
    baseline_values = np.ones(shape=(len(time_series)))*noise_floor[i][0]
    
    x = time
    time_series = time_series.tolist()
    baseline_values = baseline_values.tolist()
    
    x_start = np.interp(noise_floor[i][0],time_series[start_finish_vals[i][0]-1:start_finish_vals[i][0]+1],x[start_finish_vals[i][0]-1:start_finish_vals[i][0]+1])
    
    x_finish = np.interp(noise_floor[i][0],time_series[start_finish_vals[i][1]-1:start_finish_vals[i][1]+1][::-1],x[start_finish_vals[i][1]-1:start_finish_vals[i][1]+1][::-1])
    
    x_vals = np.append(x_start,x[start_finish_vals[i][0]:start_finish_vals[i][1]])
    x_vals = np.append(x_vals,x_finish)
    
    y_vals = np.append(noise_floor[i][0],time_series[start_finish_vals[i][0]:start_finish_vals[i][1]])
    y_vals = np.append(y_vals,noise_floor[i][0])
    
    area_under_first_peak[0] = np.trapz(y_vals, x_vals) - np.trapz(baseline_values[start_finish_vals[i][0]-1:start_finish_vals[i][1]+1], x_vals)
    print('The upper bound peak integration for the first peak is approximately %s' % (area_under_first_peak[0]*100))
    
    #LOWER_BOUND_AREA
    baseline_values = np.ones(shape=(len(time_series)))*noise_floor[i][1]
    
    baseline_values = baseline_values.tolist()
    
    x_start = np.interp(noise_floor[i][1],time_series[start_finish_vals[i][0]-1:start_finish_vals[i][0]+1],x[start_finish_vals[i][0]-1:start_finish_vals[i][0]+1])
    
    x_finish = np.interp(noise_floor[i][1],time_series[start_finish_vals[i][1]-1:start_finish_vals[i][1]+1][::-1],x[start_finish_vals[i][1]-1:start_finish_vals[i][1]+1][::-1])
    
    x_vals = np.append(x_start,x[start_finish_vals[i][0]:start_finish_vals[i][1]])
    x_vals = np.append(x_vals,x_finish)
    
    y_vals = np.append(noise_floor[i][1],time_series[start_finish_vals[i][0]:start_finish_vals[i][1]])
    y_vals = np.append(y_vals,noise_floor[i][1])
    
    area_under_first_peak[1] = np.trapz(y_vals, x_vals) - np.trapz(baseline_values[start_finish_vals[i][0]-1:start_finish_vals[i][1]+1], x_vals)
    print('The lower bound peak integration for the first peak is approximately %s' % (area_under_first_peak[1]*100))
    
    if i == 0:
        molecule = "Uracil"
    if i == 1: 
        molecule = "Thymine"
    if i == 2: 
        molecule = "Cytosine"
    if i == 3: 
        molecule = "Hypoxanthine"
    if i == 4: 
        molecule = "Adenine"
    if i == 5:
        molecule = "Xanthine"
    if i == 6:
        molecule = "Guanine"
        
        
    print('The average area for %s is %s +- %s' % (molecule,np.average(area_under_first_peak*100),np.std(area_under_first_peak*100)))
    
    
    rev_baseline_values = baseline_values[start_finish_vals[i][0]-1:start_finish_vals[i][1]+1]
    rev_baseline_values.reverse()
    area_x = np.append(x_vals,x_vals[::-1])
    area_y = np.append(y_vals,rev_baseline_values)
    
    trace = go.Scatter(
        x=x,
        y=time_series,
        mode='lines',
        marker=dict(
            color='#B292EA',
        ),                                                                                                                                                                                                                                                                                                      
        name='Original Plot'
    )
    
    trace2 = go.Scatter(
        x=x,
        y=baseline_values,
        mode='markers',
        marker=dict
            size=3,
            color='#EB55BF',
        ),
        name='Baseline'
    )
    
    trace3 = go.Scatter(
        x=area_x,
        y=area_y,
        mode='lines+markers',
        marker=dict(
            size=14,
            color='rgb(255,0,0)',
        ),
        name='1st Peak Outline'
    )
    
    
    layout = go.Layout()
    
    trace_data = [trace, trace2, trace3]
    fig = go.Figure(data=trace_data, layout=layout)
    
    fig.update_layout(
    hoverlabel=dict(
        font_size=50,
        font_family="Rockwell"
    ),
    yaxis = dict(
        tickfont = dict(size=40)),
    xaxis = dict(
        tickfont = dict(size=40))
)

    
    #fig.update_yaxes(type="log")
    
    py.iplot(fig, filename='H5-peak-integration')
